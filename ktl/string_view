#pragma once

#include <ktl_core.h>
#include <ntstrsafe.h>

#include <algorithm>
#include <type_traits>
#include <hash_impl.h>

namespace ktl
{
	template<typename allocator_type>
	struct unicode_string;

	struct unicode_string_view
	{
		static constexpr size_t npos = MAXSIZE_T;

		constexpr unicode_string_view():
			str_ {}
		{
		}

		constexpr unicode_string_view(PUNICODE_STRING str)
		{
			if (str == nullptr)
				str_ = {};
			else
				str_ = *str;
		}

		constexpr unicode_string_view(const wchar_t* str, size_t length = npos)
		{
			str_.Buffer = const_cast<PWCH>(str);

			str_.Length = static_cast<USHORT>(__builtin_wcslen(str));
			str_.MaximumLength = str_.Length;

			if (str_.Length > length)
				str_.Length = static_cast<USHORT>(length);

			str_.Length *= static_cast<USHORT>(sizeof(wchar_t));
			str_.MaximumLength *= static_cast<USHORT>(sizeof(wchar_t));
		}

		constexpr unicode_string_view(const unicode_string_view& other) :
			str_(other.str_)
		{
		}

		template<typename string_type>
		unicode_string_view(const string_type& other) :
			str_(other.str_)
		{
		}

		template<typename string_type>
		[[nodiscard]] unicode_string_view& operator=(const string_type& other)
		{
			str_ = other.str_;
		}

		/// <summary>
		/// Size of view, in characters
		/// </summary>
		[[nodiscard]] inline constexpr size_t size() const
		{
			return str_.Length / sizeof(wchar_t);
		}

		/// <summary>
		/// Size of view in bytes, excluding null terminator
		/// </summary>
		[[nodiscard]] inline constexpr size_t byte_size() const
		{
			return str_.Length;
		}

		[[nodiscard]] inline constexpr size_t max_size() const
		{
			return NTSTRSAFE_UNICODE_STRING_MAX_CCH - 1;
		}

		[[nodiscard]] inline constexpr PCUNICODE_STRING data() const
		{
			return &str_;
		}

		[[nodiscard]] inline PUNICODE_STRING data()
		{
			return &str_;
		}

		[[nodiscard]] inline constexpr PCUNICODE_STRING operator&() const
		{
			return data();
		}

		[[nodiscard]] inline PUNICODE_STRING operator&()
		{
			return data();
		}

		[[nodiscard]] constexpr unicode_string_view substr(size_t pos = 0, size_t count = npos) const
		{
			if (pos > size())
				return {};

			if (count == npos || ((pos + count) > size()))
				count = size() - pos;

			unicode_string_view sub{ str_.Buffer + pos, count };
			return sub;
		}

		[[nodiscard]] bool starts_with(unicode_string_view prefix) const
		{
			if (size() < prefix.size())
				return false;

			auto sub = substr(0, prefix.size());
			return sub == prefix;
		}

		[[nodiscard]] bool ends_with(unicode_string_view suffix) const
		{
			if (size() < suffix.size())
				return false;

			auto sub = substr(size() - suffix.size());
			return sub == suffix;
		}

		[[nodiscard]] bool operator==(const unicode_string_view& other) const
		{
			return compare(other) == 0;
		}

		[[nodiscard]] bool operator!=(const unicode_string_view& other) const
		{
			return compare(other) != 0;
		}

		[[nodiscard]] int compare(const unicode_string_view& other, bool caseInsensitive = false) const
		{
			return RtlCompareUnicodeString(data(), other.data(), caseInsensitive ? TRUE : FALSE);
		}

		template<typename allocator_type>
		[[nodiscard]] int compare(const unicode_string<allocator_type>& other, bool caseInsensitive = false) const
		{
			return RtlCompareUnicodeString(data(), other.data(), caseInsensitive ? TRUE : FALSE);
		}

		[[nodiscard]] wchar_t operator[](size_t index)
		{
			return str_.Buffer[index];
		}

	private:
		UNICODE_STRING str_ = {};
	};

	template<>
	struct hash<unicode_string_view, void>
	{
		[[nodiscard]] hash_t operator()(const unicode_string_view& value) const
		{
			return wyhash(value.data()->Buffer, value.byte_size(), 0, _wyp);
		}
	};
}