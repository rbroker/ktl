#pragma once

#include "ktl_core.h"
#include "memory"
#include "optional"
#include "type_traits"

namespace ktl
{
	template<typename element_type>
	struct list_iterator
	{
		using value_type = typename element_type::value_type;
		using reference = value_type&;
		using pointer = value_type*;

		template<typename value_type, typename allocator_type>
		friend struct list;

		list_iterator(const PLIST_ENTRY head) :
			head_(head)
		{
			curr_ = head_->Flink;
		}

		list_iterator(const PLIST_ENTRY head, const PLIST_ENTRY curr) :
			head_(head),
			curr_(curr)
		{
		}

		list_iterator() :
			head_(nullptr),
			curr_(nullptr)
		{
		}

		list_iterator(const list_iterator& other) :
			list_iterator(other.head_, other.curr_)
		{
			KTL_TRACE_COPY_CONSTRUCTOR;
		}

		list_iterator& operator=(const list_iterator& other)
		{
			KTL_TRACE_COPY_ASSIGNMENT;

			head_ = other.head_;
			curr_ = other.curr_;
			return *this;
		}

		[[nodiscard]] reference operator*() const
		{
			element_type* ptr = (CONTAINING_RECORD(curr_, element_type, Entry));
			return ptr->Value;
		}

		[[nodiscard]] pointer operator->() const
		{
			element_type* ptr = (CONTAINING_RECORD(curr_, element_type, Entry));
			return addressof(ptr->Value);
		}

		list_iterator& operator++()
		{
			auto next = curr_->Flink;

			if (next == head_) // End of list.
			{
				curr_ = nullptr;
			}
			else
			{
				curr_ = next;
			}

			return *this;
		}

		list_iterator operator++(int)
		{
			list_iterator tmp = *this;
			++(*this);
			return tmp;
		}

		list_iterator& operator--()
		{
			auto prev = curr_->Blink;

			if (prev == head_)
			{
				curr_ = nullptr;
			}
			else
			{
				curr_ = prev;
			}

			return *this;
		}

		list_iterator operator--(int)
		{
			list_iterator tmp = *this;
			--(*this);
			return tmp;
		}

		[[nodiscard]] bool operator==(const list_iterator& other) const
		{
			return curr_ == other.curr_;
		}

		[[nodiscard]] bool operator!=(const list_iterator& other) const
		{
			return !(*this == other);
		}

	private:
		PLIST_ENTRY head_;
		PLIST_ENTRY curr_;
	};

	template<typename T>
	struct list_element
	{
		using value_type = T;

		list_element()
		{
		}

		list_element(const T& value) :
			Value{ value }
		{
			KTL_TRACE_COPY_CONSTRUCTOR;
		}

		list_element(T&& value) :
			Value{ move(value) }
		{
		}

		template<class... Args>
		list_element(Args&&... args) :
			Value{ args... }
		{
		}

		list_element& operator=(const list_element&) = delete;

		LIST_ENTRY Entry = {};
		value_type Value;
	};

	template<typename element_type>
	struct list_iterator;

	template<typename T, typename allocator_type = paged_pool_allocator>
	struct list
	{
		using value_type = remove_reference_t<T>;
		using element_type = list_element<value_type>;
		using iterator = list_iterator<element_type>;

		list() :
			a_{ allocator_type::instance() }
		{
			InitializeListHead(&head_);
		}

		list(list&& other) :
			size_{ other.size_ },
			a_ { other.a_ }
		{
			InitializeListHead(&(head_));

			// Move the entries in other to this newly constructed list.
			if (!IsListEmpty(&(other.head_)))
			{
				auto entry = other.head_.Flink;
				RemoveEntryList(&(other.head_));
				InitializeListHead(&(other.head_));
				AppendTailList(&head_, entry);

				other.size_ = 0;
			}
		}

		~list()
		{
			clear();
		}

		// Copy construction & assignment as disabled, in favour of supporting an
		// explicit "copy" call.
		list(const list&) = delete;
		list& operator=(const list&) = delete;

		/// <summary>
		/// Perform an explicit copy of this list.
		/// </summary>
		/// <returns>An optional containing the copied list if no errors occurred while copying</returns>
		[[nodiscard]] optional<list> copy()
		{
			list copiedList;

			auto e = end();
			for (auto it = begin(); it != e; ++it)
			{
				if (!copiedList.push_back(*it))
					return {};
			}

			return optional<list>{ move(copiedList) };
		}

		/// <summary>
		/// push element to back of list.
		/// </summary>
		/// <param name="value">new value</param>
		/// <returns>true if element successfully added, else false</returns>
		[[nodiscard]] bool push_back(const value_type& value)
		{
			auto newElement = construct<element_type>(a_, value);
			if (!newElement)
				return false;

			InsertTailList(&head_, &(newElement->Entry));

			++size_;
			return true;
		}

		/// <summary>
		/// push element to back of list.
		/// </summary>
		/// <param name="value">new value</param>
		/// <returns>true if element successfully added, else false</returns>
		[[nodiscard]] bool push_back(value_type&& value)
		{
			auto newElement = construct<element_type>(a_, value);
			if (!newElement)
				return false;

			InsertTailList(&head_, &(newElement->Entry));

			++size_;
			return true;
		}

		/// <summary>
		/// emplace element to back of list.
		/// </summary>
		/// <param name="...args">construction arguments for the added element</param>
		/// <returns>Returns an observer_ptr to the emplaced object, or an empty (nullptr) observer_ptr</returns>
		template<class... Args>
		observer_ptr<value_type> emplace_back(Args&&... args)
		{
			auto newElement = construct<element_type>(a_, forward<Args>(args)...);
			if (!newElement)
				return {};

			InsertTailList(&head_, &(newElement->Entry));

			++size_;
			return observer_ptr<value_type>{ &newElement->Value };
		}

		iterator erase(iterator it)
		{
			PLIST_ENTRY curr = it.curr_;
			PLIST_ENTRY next = curr->Flink;

			BOOLEAN lastEntry = RemoveEntryList(curr);

			--size_;
			destroy(a_, CONTAINING_RECORD(curr, element_type, Entry));

			if (!lastEntry)
			{
				return iterator{ &head_, next };
			}
			else
			{
				return iterator{};
			}
		}

		/// <summary>
		/// push element to front of list.
		/// </summary>
		/// <param name="value">new value</param>
		/// <returns>true if element successfully added, else false</returns>
		[[nodiscard]] bool push_front(const T& value)
		{
			auto newElement = construct<element_type>(a_, value);
			if (!newElement)
				return false;

			InsertHeadList(&head_, &(newElement->Entry));

			++size_;
			return true;
		}

		/// <summary>
		/// push element to front of list.
		/// </summary>
		/// <param name="value">new value</param>
		/// <returns>true if element successfully added, else false</returns>
		[[nodiscard]] bool push_front(value_type&& value)
		{
			auto newElement = construct<element_type>(a_, value);
			if (!newElement)
				return false;

			InsertHeadList(&head_, &(newElement->Entry));

			++size_;
			return true;
		}

		/// <summary>
		/// emplace element to front of list.
		/// </summary>
		/// <param name="...args">construction arguments for the added element</param>
		/// <returns>Returns an observer_ptr to the emplaced object, or an empty (nullptr) observer_ptr</returns>
		template<class... Args>
		observer_ptr<value_type> emplace_front(Args&&... args)
		{
			auto newElement = construct<element_type>(a_, forward<Args>(args)...);
			if (!newElement)
				return {};

			InsertHeadList(&head_, &(newElement->Entry));

			++size_;

			return observer_ptr<value_type>{&newElement->Value};
		}

		void pop_back()
		{
			auto oldTail = RemoveTailList(&head_);
			destroy<element_type>(a_, CONTAINING_RECORD(oldTail, element_type, Entry));

			--size_;
		}

		void pop_front()
		{
			auto oldHead = RemoveHeadList(&head_);
			destroy<element_type>(a_, CONTAINING_RECORD(oldHead, element_type, Entry));

			--size_;
		}

		[[nodiscard]] value_type& back()
		{
			return CONTAINING_RECORD(head_.Blink, element_type, Entry)->Value;
		}

		[[nodiscard]] value_type& front()
		{
			return CONTAINING_RECORD(head_.Flink, element_type, Entry)->Value;
		}

		[[nodiscard]] size_t size() const
		{
			return size_;
		}

		[[nodiscard]] bool empty() const
		{
			return size_ == 0;
		}

		void clear()
		{
			while (!empty())
			{
				pop_back();
			}
		}

		[[nodiscard]] iterator begin()
		{
			if (empty())
			{
				return end();
			}

			return iterator{ &head_ };
		}

		[[nodiscard]] iterator end()
		{
			return iterator{};
		}

	private:
		size_t size_ = 0;
		LIST_ENTRY head_;
		allocator_type& a_;
	};

	// Define list variants with different allocators.
	template<typename T>
	using paged_list = list<T, paged_pool_allocator>;

	template<typename T>
	using nonpaged_list = list<T, nonpaged_pool_allocator>;

	template<typename T>
	using paged_lookaisde_list = list<T, paged_lookaside_allocator<sizeof(list_element<T>)>>;

	template<typename T>
	using nonpaged_lookaside_list = list<T, nonpaged_lookaside_allocator<sizeof(list_element<T>)>>;

	template<class T>
	list_iterator<list_element<T>> begin(list<T>& l)
	{
		return l.begin();
	}

	template<class T>
	list_iterator<list_element<T>> end(list<T>& l)
	{
		return l.end();
	}
}