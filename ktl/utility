#pragma once

#include <ktl_core.h>

namespace ktl
{
	template<typename Fn>
	struct [[nodiscard]] scope_exit
	{
		scope_exit(Fn&& fn) :
			fn_(move(fn))
		{
		}

		scope_exit(const scope_exit&) = delete;
		scope_exit& operator=(const scope_exit&) = delete;

		scope_exit(scope_exit&& other) :
			fn_(move(other.fn_))
		{
			other.release();
		}

		~scope_exit()
		{
			if (!active_)
				return;

			fn_();
		}

		void release()
		{
			active_ = false;
		}

	private:
		bool active_ = true;
		Fn fn_;
	};

	template<class T>
	constexpr const T& as_const(T& t)
	{
		return t;
	}

	template<class T>
	void as_const(const T&&) = delete;
}
