#pragma once

#include "ktl_core.h"

namespace ktl
{
	struct wdf_driver_config
	{
		wdf_driver_config(PFN_WDF_DRIVER_DEVICE_ADD addCallback = WDF_NO_EVENT_CALLBACK)
		{
			WDF_DRIVER_CONFIG_INIT(&config_, addCallback);
		}

		PWDF_DRIVER_CONFIG operator->()
		{
			return &config_;
		}

		PWDF_DRIVER_CONFIG operator&()
		{
			return &config_;
		}

	private:
		WDF_DRIVER_CONFIG config_;
	};

	struct wdf_object_attributes
	{
		wdf_object_attributes()
		{
			WDF_OBJECT_ATTRIBUTES_INIT(&attributes_);
		}

		PWDF_OBJECT_ATTRIBUTES operator->()
		{
			return &attributes_;
		}

		PWDF_OBJECT_ATTRIBUTES operator&()
		{
			return &attributes_;
		}

	private:
		WDF_OBJECT_ATTRIBUTES attributes_;
	};

	struct wdf_file_object_config
	{
		wdf_file_object_config(PFN_WDF_DEVICE_FILE_CREATE createCallback, PFN_WDF_FILE_CLOSE closeCallback, PFN_WDF_FILE_CLEANUP cleanupCallback = WDF_NO_EVENT_CALLBACK)
		{
			WDF_FILEOBJECT_CONFIG_INIT(&config_,
				createCallback,
				closeCallback,
				cleanupCallback);
		}

		PWDF_FILEOBJECT_CONFIG operator->()
		{
			return &config_;
		}

		PWDF_FILEOBJECT_CONFIG operator&()
		{
			return &config_;
		}

	private:
		WDF_FILEOBJECT_CONFIG config_;
	};

	struct wdf_io_queue_config
	{
		wdf_io_queue_config(WDF_IO_QUEUE_DISPATCH_TYPE dispatch = WdfIoQueueDispatchSequential)
		{
			WDF_IO_QUEUE_CONFIG_INIT_DEFAULT_QUEUE(&config_, dispatch);
		}

		PWDF_IO_QUEUE_CONFIG operator->()
		{
			return &config_;
		}

		PWDF_IO_QUEUE_CONFIG operator&()
		{
			return &config_;
		}

	private:
		WDF_IO_QUEUE_CONFIG config_;
	};

	struct [[nodiscard]] wdf_device_init
	{
		wdf_device_init(WDFDRIVER handle, const UNICODE_STRING* securityDescriptor)
		{
			init_ = WdfControlDeviceInitAllocate(handle, securityDescriptor);
			if (!init_)
				KTL_LOG_ERROR("WdfControlDeviceInitAllocate() failed!\n");
		}

		~wdf_device_init()
		{
			if (init_ == nullptr)
				return;

			WdfDeviceInitFree(init_);
		}

		void set_exclusive_access(bool yes)
		{
			WdfDeviceInitSetExclusive(init_, yes ? TRUE : FALSE);
		}

		void set_io_type(WDF_DEVICE_IO_TYPE type)
		{
			WdfDeviceInitSetIoType(init_, type);
		}

		void set_shutdown_handler(PFN_WDF_DEVICE_SHUTDOWN_NOTIFICATION callback, UCHAR flags = WdfDeviceShutdown)
		{
			WdfControlDeviceInitSetShutdownNotification(init_, callback, flags);
		}

		void set_file_object_config(PFN_WDF_DEVICE_FILE_CREATE createCb, PFN_WDF_FILE_CLOSE closeCb, PFN_WDF_FILE_CLEANUP cleanupCb = WDF_NO_EVENT_CALLBACK, PWDF_OBJECT_ATTRIBUTES attr = WDF_NO_OBJECT_ATTRIBUTES)
		{
			ktl::wdf_file_object_config fileConfig(createCb, closeCb, cleanupCb);

			WdfDeviceInitSetFileObjectConfig(init_,
				&fileConfig,
				attr);
		}

		explicit operator bool() const
		{
			return init_ != nullptr;
		}

		PWDFDEVICE_INIT operator->()
		{
			return init_;
		}

		PWDFDEVICE_INIT operator&()
		{
			return init_;
		}

		PWDFDEVICE_INIT* get()
		{
			return &init_;
		}

	private:
		PWDFDEVICE_INIT init_;
	};

	struct [[nodiscard]] wdf_auto_request
	{
		wdf_auto_request(WDFREQUEST& request, NTSTATUS& status) :
			request_(&request),
			status_(status)
		{
			status_ = STATUS_SUCCESS;
		}

		~wdf_auto_request()
		{
			if (!request_)
				return;

			WdfRequestComplete(*request_, status_);
		}

		WDF_REQUEST_PARAMETERS params()
		{
			WDF_REQUEST_PARAMETERS params;

			WDF_REQUEST_PARAMETERS_INIT(&params);
			WdfRequestGetParameters(*request_, &params);

			return params;
		}

		bool forward(WDFDEVICE device)
		{
			status_ = WdfDeviceEnqueueRequest(device, *request_);
			if (NT_SUCCESS(status_))
				request_ = nullptr;

			return NT_SUCCESS(status_);
		}

		/// <summary>
		/// Attempts to access the user-supplied buffer for read, that is the kernel reads data supplied by usermode.
		/// </summary>
		/// <returns>The user input buffer mapped to system address space.</returns>
		WDFMEMORY user_in()
		{
			size_t len;
			PVOID unsafe_buffer;
			status_ = WdfRequestRetrieveUnsafeUserInputBuffer(*request_, 0, &unsafe_buffer, &len);
			if (!NT_SUCCESS(status_))
				return nullptr;

			WDFMEMORY memory;
			status_ = WdfRequestProbeAndLockUserBufferForRead(*request_, unsafe_buffer, len, &memory);
			if (!NT_SUCCESS(status_))
				return nullptr;

			return memory;
		}

		/// <summary>
		/// Attempts to access the user-supplied buffer for write, that is the kernel writes data to usermode.
		/// </summary>
		/// <returns>The user output buffer mapped to system address space.</returns>
		WDFMEMORY user_out()
		{
			size_t len;
			PVOID unsafe_buffer;
			status_ = WdfRequestRetrieveUnsafeUserOutputBuffer(*request_, 0, &unsafe_buffer, &len);
			if (!NT_SUCCESS(status_))
				return nullptr;

			WDFMEMORY memory;
			status_ = WdfRequestProbeAndLockUserBufferForWrite(*request_, unsafe_buffer, len, &memory);
			if (!NT_SUCCESS(status_))
				return nullptr;

			return memory;
		}

		void set_information(ULONG_PTR information)
		{
			WdfRequestSetInformation(*request_, information);
		}

		template<typename T>
		T* create_context(PWDF_OBJECT_ATTRIBUTES attributes)
		{
			T* context = nullptr;
			status_ = WdfObjectAllocateContext(request_, attributes, reinterpret_cast<PVOID*>(&context));
			if (!NT_SUCCESS(status_))
				return nullptr;

			return context;
		}

	private:
		WDFREQUEST* request_;
		NTSTATUS& status_;
	};
}