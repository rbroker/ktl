#include <type_traits>

namespace ktl
{
	template<typename T, typename... tuple_types>
	struct tuple;

	template<size_t index, typename... tuple_types>
	struct _tuple_impl;
}

// We need to define these in the std namespace for structure binding support.
// Later in this file, we create some aliases to these, so we can avoid polluting
// "ktl" code with "std" references.
namespace std
{
	template<typename... tuple_types>
	struct tuple_size;

	template<typename... tuple_types>
	struct tuple_size<ktl::tuple<tuple_types...>> : ktl::integral_constant<size_t, sizeof...(tuple_types)>
	{
	};

	template<class T>
	struct tuple_size<const T> : ktl::integral_constant<size_t, tuple_size<T>::value>
	{
	};

	template<typename... tuple_types>
	inline constexpr size_t tuple_size_v = tuple_size<tuple_types...>::value;

	template<size_t index, class T>
	struct tuple_element;

	template<size_t index, class T, class... tuple_types>
	struct tuple_element<index, ktl::tuple<T, tuple_types...>>
		: tuple_element<index - 1, ktl::tuple<tuple_types...>>
	{
	};

	template<size_t index, class T, class... tuple_types>
	struct tuple_element<index, const ktl::tuple<T, tuple_types...>>
		: tuple_element<index - 1, const ktl::tuple<tuple_types...>>
	{
	};

	template<class T, class... tuple_types>
	struct tuple_element<0, const ktl::tuple<T, tuple_types...>>
	{
		using type = ktl::add_const_t<T>;
	};

	template<class T, class... tuple_types>
	struct tuple_element<0, ktl::tuple<T, tuple_types...>>
	{
		using type = T;
	};

	template<size_t index, typename T>
	using tuple_element_t = typename tuple_element<index, T>::type;
}

namespace ktl
{
	// ref. https://medium.com/@mortificador/implementing-std-tuple-in-c-17-3cc5c6da7277

	// Redefine aliases in ktl namespace
	template<typename... tuple_types>
	using tuple_size = std::tuple_size<tuple_types...>;

	template<typename... tuple_types>
	inline constexpr size_t tuple_size_v = std::tuple_size_v<tuple_types...>;

	template<size_t index, typename T>
	using tuple_element = std::tuple_element<index, T>;

	template<size_t index, typename T>
	using tuple_element_t = typename tuple_element<index, T>::type;

	// Define get<> methods.
	template<size_t index, typename T>
	struct _tuple_wrapper;

	template<size_t index, typename... tuple_types>
	auto& get(tuple<tuple_types...>& t)
	{
		static_assert(index < tuple_size_v<tuple<tuple_types...>>, "Index was out of range for the given tuple!");

		using element_type = tuple_element_t<index, tuple<tuple_types...>>;
		using impl_type = _tuple_wrapper<index, element_type>;

		return static_cast<impl_type&>(t).type_;
	}

	template<size_t index, typename... tuple_types>
	const auto& get(const tuple<tuple_types...>& t)
	{
		static_assert(index < tuple_size_v<tuple<tuple_types...>>, "Index was out of range for the given tuple!");

		using element_type = tuple_element_t<index, tuple<tuple_types...>>;
		using impl_type = _tuple_wrapper<index, element_type>;

		return static_cast<const impl_type&>(t).type_;
	}

	template<size_t index, typename... tuple_types>
	auto&& get(tuple<tuple_types...>&& t)
	{
		static_assert(index < tuple_size_v<tuple<tuple_types...>>, "Index was out of range for the given tuple!");

		using element_type = tuple_element_t<index, tuple<tuple_types...>>;
		using impl_type = _tuple_wrapper<index, element_type>;

		return static_cast<impl_type&>(t).type_;
	}

	// Tuple implementation
	template<size_t index, typename T>
	struct _tuple_wrapper
	{
		_tuple_wrapper() = default;
		_tuple_wrapper(const _tuple_wrapper&) = default;
		_tuple_wrapper(_tuple_wrapper&&) = default;

		_tuple_wrapper(const T& t)
			: type_(t)
		{
		}

		_tuple_wrapper(T&& t)
			: type_(move(t))
		{
		}

		[[no_unique_address]] T type_;
	};

	template<size_t index, typename... tuple_types>
	struct _tuple_impl
	{
	};

	template<size_t index, typename T, typename... tuple_types>
	struct _tuple_impl<index, T, tuple_types...> :
		public _tuple_wrapper<index, remove_reference_t<T>>,
		public _tuple_impl<index + 1, tuple_types...>
	{
		template<typename... ctor_types>
		_tuple_impl(tuple<ctor_types...>& t) :
			_tuple_wrapper<index, remove_reference_t<T>>(get<index>(t)),
			_tuple_impl<index + 1, tuple_types...>(t)
		{
		}

		template<typename... ctor_types>
		_tuple_impl(tuple<ctor_types...>&& t) :
			_tuple_wrapper<index, remove_reference_t<T>>(move(get<index>(t))),
			_tuple_impl<index + 1, tuple_types...>(t)
		{
		}

		template<typename ctor_type, typename... ctor_args>
		_tuple_impl(ctor_type&& t, ctor_args&&... args) :
			_tuple_wrapper<index, remove_reference_t<T>>(forward<ctor_type>(t)),
			_tuple_impl<index + 1, tuple_types...>(forward<ctor_args>(args)...)
		{
		}
	};

	template<typename T, typename... tuple_types>
	struct tuple : public _tuple_impl<0, T, tuple_types...>
	{
		tuple(tuple& t) : _tuple_impl<0, T, tuple_types...>(t)
		{
		}

		tuple(tuple&& t) : _tuple_impl<0, T, tuple_types...>(move(t))
		{
		}

		template<typename... ctor_args>
		tuple(ctor_args&&... args) : _tuple_impl<0, T, tuple_types...>(forward<ctor_args>(args)...)
		{
		}
	};

	template<typename... ctor_args>
	tuple(ctor_args... args)->tuple<ctor_args...>;
}